from alembic import op
import sqlalchemy as sa
from werkzeug.security import generate_password_hash

# revision identifiers, used by Alembic.
revision = 'cf2429d28fd6'
down_revision = '613b36a889fb'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Add 'password_hash' column as nullable
    op.add_column('user', sa.Column('password_hash', sa.String(length=128), nullable=True))
    # ### end Alembic commands ###

    # Populate 'password_hash' for existing users
    connection = op.get_bind()
    users = connection.execute(sa.text("SELECT id, password FROM user")).fetchall()

    for user in users:
        if user.password:
            # Hash the existing plaintext password
            hashed_password = generate_password_hash(user.password)
            connection.execute(
                sa.text("UPDATE user SET password_hash = :hashed_password WHERE id = :user_id"),
                {"hashed_password": hashed_password, "user_id": user.id}
            )

    # Now, use batch_alter_table to set 'password_hash' as non-nullable
    with op.batch_alter_table("user") as batch_op:
        # Set 'password_hash' to be non-nullable
        batch_op.alter_column(
            "password_hash",
            existing_type=sa.String(length=128),
            nullable=False
        )

        # Drop the old 'password' column if it's no longer needed
        batch_op.drop_column('password')

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Re-add the 'password' column as nullable
    op.add_column('user', sa.Column('password', sa.String(length=128), nullable=True))
    # ### end Alembic commands ###

    # Populate 'password' with hashed passwords (Note: Reverting hashed passwords to plaintext is not feasible)
    # Here, we'll set it to empty strings or handle accordingly
    connection = op.get_bind()
    users = connection.execute(sa.text("SELECT id, password_hash FROM user")).fetchall()

    for user in users:
        if user.password_hash:
            # WARNING: Reverting hashed passwords to plaintext is insecure and generally not possible
            # Here, we'll set it to an empty string or handle as per your requirements
            connection.execute(
                sa.text("UPDATE user SET password = :password WHERE id = :user_id"),
                {"password": "", "user_id": user.id}
            )

    # Now, use batch_alter_table to drop 'password_hash' and set 'password' as non-nullable
    with op.batch_alter_table("user") as batch_op:
        # Set 'password' to be non-nullable if required
        batch_op.alter_column(
            "password",
            existing_type=sa.String(length=128),
            nullable=False
        )

        # Drop the 'password_hash' column
        batch_op.drop_column('password_hash')